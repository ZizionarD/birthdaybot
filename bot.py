import discord
from discord.ext import commands, tasks
import json
from datetime import datetime, timedelta, time
import asyncio
import os
import logging
from dotenv import load_dotenv
import aiofiles

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω Discord –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ.")
    exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = "config.json"
if not os.path.exists(CONFIG_FILE):
    logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit(1)

with open(CONFIG_FILE, "r") as config_file:
    config = json.load(config_file)

BIRTHDAY_CHANNEL_ID = config.get("BIRTHDAY_CHANNEL_ID")
SETUP_CHANNEL_ID = config.get("SETUP_CHANNEL_ID")

if not BIRTHDAY_CHANNEL_ID or not SETUP_CHANNEL_ID:
    logger.error("ID –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª birthdays.json, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
BIRTHDAYS_FILE = "birthdays.json"
if not os.path.exists(BIRTHDAYS_FILE):
    with open(BIRTHDAYS_FILE, "w") as f:
        json.dump({}, f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
async def load_birthdays():
    async with aiofiles.open(BIRTHDAYS_FILE, mode="r") as f:
        return json.loads(await f.read())

async def save_birthdays():
    async with aiofiles.open(BIRTHDAYS_FILE, mode="w") as f:
        await f.write(json.dumps(birthdays))

birthdays = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.messages = True
intents.reactions = True
intents.message_content = True
intents.guilds = True
bot = commands.Bot(command_prefix="!", intents=intents)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@bot.command(name="set_birthday")
async def set_birthday(ctx, date: str):
    if ctx.channel.id != SETUP_CHANNEL_ID:
        await ctx.send(f"–ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ <#{SETUP_CHANNEL_ID}>.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    user_id = str(ctx.author.id)
    if user_id in birthdays:
        await ctx.send(f"{ctx.author.mention}, –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {birthdays[user_id]}. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã !remove_birthday.")
        return

    try:
        birthday = datetime.strptime(date, "%d.%m.%Y")
        if birthday > datetime.now():
            await ctx.send(f"{ctx.author.mention}, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return
        elif (datetime.now() - birthday).days / 365 > 150:
            await ctx.send(f"{ctx.author.mention}, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")
            return

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–≥–ª–∞—Å–∏–∏
        consent_message = await ctx.send(
            f"\ud83d\udcdc {ctx.author.mention}, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è? "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ: \u2705 ‚Äî —Å–æ–≥–ª–∞—Å–µ–Ω, \u274c ‚Äî –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω."
        )
        await consent_message.add_reaction("\u2705")
        await consent_message.add_reaction("\u274c")

        def check(reaction, user):
            return user == ctx.author and str(reaction.emoji) in ["\u2705", "\u274c"] and reaction.message.id == consent_message.id

        try:
            reaction, _ = await bot.wait_for("reaction_add", timeout=60.0, check=check)
            if str(reaction.emoji) == "\u2705":
                birthdays[user_id] = date

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                await save_birthdays()

                confirmation_message = await ctx.send(f"{ctx.author.mention}, –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                await asyncio.sleep(5)
                await confirmation_message.delete()
            else:
                decline_message = await ctx.send(f"{ctx.author.mention}, –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                await asyncio.sleep(5)
                await decline_message.delete()
        except asyncio.TimeoutError:
            timeout_message = await ctx.send(f"{ctx.author.mention}, –≤—ã –Ω–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await asyncio.sleep(5)
            await timeout_message.delete()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–≥–ª–∞—Å–∏–∏
        await consent_message.delete()
    except ValueError:
        error_message = await ctx.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        await asyncio.sleep(5)
        await error_message.delete()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.message.delete()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
@bot.command(name="list")
async def list_birthdays(ctx):
    if not birthdays:
        await ctx.send("–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –ø—É—Å—Ç.")
        return

    sorted_birthdays = sorted(
        birthdays.items(), 
        key=lambda item: datetime.strptime(item[1], "%d.%m.%Y")
    )
    grouped_birthdays = {}
    for user_id, date in sorted_birthdays:
        month = datetime.strptime(date, "%d.%m.%Y").strftime("%B")
        if month not in grouped_birthdays:
            grouped_birthdays[month] = []
        grouped_birthdays[month].append((user_id, date))

    embed = discord.Embed(
        title="üìÖ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π", 
        color=discord.Color.blue()
    )

    for month, users in grouped_birthdays.items():
        value = "\n".join(
            f"<@{user_id}> ‚Äî {date}" for user_id, date in users
        )
        embed.add_field(name=month, value=value, inline=False)

    await ctx.send(embed=embed)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
@bot.command(name="remove_birthday")
async def remove_birthday(ctx):
    user_id = str(ctx.author.id)
    if user_id in birthdays:
        del birthdays[user_id]
        await save_birthdays()
        await ctx.send(f"{ctx.author.mention}, –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await ctx.send(f"{ctx.author.mention}, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.")

# –ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
@tasks.loop(hours=24)
async def check_birthdays():
    today = datetime.now().strftime("%d.%m")
    channel = bot.get_channel(BIRTHDAY_CHANNEL_ID)

    if not channel:
        logger.error("–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return

    birthday_users = [
        await bot.fetch_user(int(user_id))
        for user_id, birthday in birthdays.items()
        if birthday.startswith(today)
    ]

    if birthday_users:
        mentions = ', '.join(user.mention for user in birthday_users)
        await channel.send(f"@everyone \ud83c\udf89 –°–µ–≥–æ–¥–Ω—è –î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è —É {mentions}! \ud83c\udf82 –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å!")

@check_birthdays.before_loop
async def before_check_birthdays():
    await bot.wait_until_ready()
    now = datetime.now()
    midnight = datetime.combine(now + timedelta(days=1), time.min)
    await discord.utils.sleep_until(midnight)

@tasks.loop(hours=24)
async def notify_upcoming_birthdays():
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%d.%m")
    channel = bot.get_channel(BIRTHDAY_CHANNEL_ID)

    if not channel:
        logger.error("–ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    upcoming_users = [
        await bot.fetch_user(int(user_id))
        for user_id, birthday in birthdays.items()
        if birthday.startswith(tomorrow)
    ]

    if upcoming_users:
        mentions = ', '.join(user.mention for user in upcoming_users)
        await channel.send(f"üîî –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {mentions}! üéâ")
        
@notify_upcoming_birthdays.before_loop
async def before_notify_upcoming_birthdays():
    await bot.wait_until_ready()
    now = datetime.now()
    next_run = datetime.combine(now + timedelta(days=1), time.min)
    await discord.utils.sleep_until(next_run)

# –¶–∏–∫–ª —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
@tasks.loop(minutes=1)
async def change_status():
    statuses = [
        discord.Status.online,
        discord.Status.idle,
        discord.Status.dnd
    ]
    current_status = statuses[change_status.current_index]
    await bot.change_presence(status=current_status, activity=discord.Game(name="!set_birthday"))
    change_status.current_index = (change_status.current_index + 1) % len(statuses)

change_status.current_index = 0

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@bot.event
async def on_ready():
    global birthdays
    birthdays = await load_birthdays()
    logger.info(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")
    await bot.change_presence(activity=discord.Game(name="!set_birthday"))
    check_birthdays.start()
    notify_upcoming_birthdays.start()
    change_status.start()

try:
    bot.run(TOKEN)
except discord.LoginFailure:
    logger.error("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
except Exception as e:
    logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
